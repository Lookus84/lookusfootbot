import os
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

class BotDatabase:
    def __init__(self):
        self.data_file = '/tmp/football_bot_data.pkl'
        self.data = self.load_data()
    
    def load_data(self):
        try:
            with open(self.data_file, 'rb') as f:
                return pickle.load(f)
        except (FileNotFoundError, EOFError):
            return {
                'play': set(),
                'cancel': set(),
                'maybe': set(),
                'last_notification': 0,
                'all_users': set()
            }
    
    def save_data(self):
        with open(self.data_file, 'wb') as f:
            pickle.dump(self.data, f)

db = BotDatabase()

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–û—à–∏–±–∫–∞: {context.error}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ start –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ handle_callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def check_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ check_notifications –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def get_stats_text():
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ get_stats_text –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def main():
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN!")
        exit(1)

    # –°–æ–∑–¥–∞–µ–º Application —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º exclusive=True
    application = (
        Application.builder()
        .token(TOKEN)
        .updater(None)  # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º updater
        .build()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await application.bot.delete_webhook(drop_pending_updates=True)
    
    print("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –ø–æ–ª–Ω—ã–º —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    try:
        await application.initialize()
        await application.start()
        await application.updater.start_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            timeout=30,
            pool_timeout=30
        )
        print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await application.updater.idle()
    except Exception as e:
        print(f"üö® –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await application.stop()
        exit(1)
    finally:
        await application.stop()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
