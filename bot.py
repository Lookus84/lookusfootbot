import os
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

class BotDatabase:
    def __init__(self):
        self.data_file = '/tmp/football_bot_data.pkl'
        self.data = self.load_data()
    
    def load_data(self):
        try:
            with open(self.data_file, 'rb') as f:
                return pickle.load(f)
        except (FileNotFoundError, EOFError):
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            return {
                'play': set(),       # –ò–∑–º–µ–Ω–∏–ª–∏ 'playing' –Ω–∞ 'play'
                'cancel': set(),     # –ò–∑–º–µ–Ω–∏–ª–∏ 'not_playing' –Ω–∞ 'cancel'
                'maybe': set(),
                'last_notification': 0,
                'all_users': set()
            }
    
    def save_data(self):
        with open(self.data_file, 'wb') as f:
            pickle.dump(self.data, f)

db = BotDatabase()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user:
        db.data['all_users'].add(user.id)
        db.save_data()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò–≥—Ä–∞—é!", callback_data='play')],
        [InlineKeyboardButton("‚ùå –ù–µ –∏–≥—Ä–∞—é", callback_data='cancel')],
        [InlineKeyboardButton("‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º", callback_data='maybe')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        if update.message:
            await update.message.reply_text(
                "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç* ‚öΩ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç* ‚öΩ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if not user:
        return

    action = query.data
    
    try:
        if action in ['play', 'cancel', 'maybe']:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            for status in ['play', 'cancel', 'maybe']:
                db.data[status].discard(user.id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            db.data[action].add(user.id)
            db.save_data()
            
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            responses = {
                'play': "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É!",
                'cancel': "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∏–≥—Ä—ã",
                'maybe': "‚ùì –í—ã –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º"
            }
            await query.answer(responses[action])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await check_notifications(update, context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await start(update, context)
            
        elif action == 'stats':
            await query.edit_message_text(
                text=get_stats_text(),
                parse_mode='Markdown'
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def check_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        playing_count = len(db.data['play'])
        chat_id = update.effective_chat.id

        if playing_count >= 15 and db.data['last_notification'] != 15:
            await context.bot.send_message(
                chat_id=chat_id,
                text="üî• *15 —á–µ–ª–æ–≤–µ–∫!!! –ò–≥—Ä–∞–µ–º –≤ —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ 5!*",
                parse_mode='Markdown'
            )
            db.data['last_notification'] = 15
            db.save_data()
        elif playing_count >= 12 and db.data['last_notification'] not in (12, 15):
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö° *–ù–∞–±—Ä–∞–ª–æ—Å—å 12 —á–µ–ª–æ–≤–µ–∫! –ò–≥—Ä–∞–µ–º –≤ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ 6!*",
                parse_mode='Markdown'
            )
            db.data['last_notification'] = 12
            db.save_data()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_notifications: {e}")

def get_stats_text():
    try:
        playing = len(db.data['play'])
        not_playing = len(db.data['cancel'])
        maybe = len(db.data['maybe'])
        ignored = len(db.data['all_users']) - playing - not_playing - maybe
        
        return (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"‚úÖ –ò–≥—Ä–∞—é—Ç: *{playing}*\n"
            f"‚ùå –û—Ç–∫–∞–∑–∞–ª–∏—Å—å: *{not_playing}*\n"
            f"‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: *{maybe}*\n"
            f"ü§∑ –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: *{ignored if ignored > 0 else 0}*"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_stats_text: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"

def main():
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN!")
        exit(1)

    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(lambda update, context: print(f"–û—à–∏–±–∫–∞: {context.error}"))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã polling –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        application.run_polling(
            close_loop=False,
            stop_signals=None,
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        print(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        os._exit(1)

if __name__ == "__main__":
    main()
