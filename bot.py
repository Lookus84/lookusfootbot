import os
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters

class BotDatabase:
    def __init__(self):
        self.data_file = '/tmp/football_bot_data.pkl'  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø—É—Ç—å –¥–ª—è Render
        self.data = self.load_data()
    
    def load_data(self):
        try:
            with open(self.data_file, 'rb') as f:
                return pickle.load(f)
        except (FileNotFoundError, EOFError):
            return {
                'playing': set(),
                'not_playing': set(),
                'maybe': set(),
                'last_notification': 0,
                'all_users': set()
            }
    
    def save_data(self):
        with open(self.data_file, 'wb') as f:
            pickle.dump(self.data, f)

db = BotDatabase()

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user:
        db.data['all_users'].add(user.id)
        db.save_data()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò–≥—Ä–∞—é!", callback_data='play')],
        [InlineKeyboardButton("‚ùå –ù–µ –∏–≥—Ä–∞—é", callback_data='cancel')],
        [InlineKeyboardButton("‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º", callback_data='maybe')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        update.message.reply_text(
            "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç* ‚öΩ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.callback_query:
        update.callback_query.edit_message_text(
            "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç* ‚öΩ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

def handle_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = update.effective_user
    
    query.answer()
    
    if not user:
        return

    if query.data == 'play':
        db.data['not_playing'].discard(user.id)
        db.data['maybe'].discard(user.id)
        db.data['playing'].add(user.id)
        query.answer("–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É! ‚úÖ")
    elif query.data == 'cancel':
        db.data['playing'].discard(user.id)
        db.data['maybe'].discard(user.id)
        db.data['not_playing'].add(user.id)
        query.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∏–≥—Ä—ã ‚ùå")
    elif query.data == 'maybe':
        db.data['playing'].discard(user.id)
        db.data['not_playing'].discard(user.id)
        db.data['maybe'].add(user.id)
        query.answer("–í—ã –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ü§î")
    elif query.data == 'stats':
        query.edit_message_text(
            get_stats_text(),
            parse_mode='Markdown'
        )
        db.save_data()
        return
    
    db.save_data()
    check_notifications(update, context)
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò–≥—Ä–∞—é!", callback_data='play')],
        [InlineKeyboardButton("‚ùå –ù–µ –∏–≥—Ä–∞—é", callback_data='cancel')],
        [InlineKeyboardButton("‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º", callback_data='maybe')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        query.edit_message_text(
            "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç* ‚öΩ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"Error editing message: {e}")

def check_notifications(update: Update, context: CallbackContext):
    playing_count = len(db.data['playing'])
    chat_id = update.effective_chat.id

    if playing_count >= 15 and db.data['last_notification'] != 15:
        context.bot.send_message(
            chat_id=chat_id,
            text="üî• *15 —á–µ–ª–æ–≤–µ–∫!!! –ò–≥—Ä–∞–µ–º –≤ —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ 5!*",
            parse_mode='Markdown'
        )
        db.data['last_notification'] = 15
        db.save_data()
    elif playing_count >= 12 and db.data['last_notification'] not in (12, 15):
        context.bot.send_message(
            chat_id=chat_id,
            text="‚ö° *–ù–∞–±—Ä–∞–ª–æ—Å—å 12 —á–µ–ª–æ–≤–µ–∫! –ò–≥—Ä–∞–µ–º –≤ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ 6!*",
            parse_mode='Markdown'
        )
        db.data['last_notification'] = 12
        db.save_data()

def get_stats_text():
    playing = len(db.data['playing'])
    not_playing = len(db.data['not_playing'])
    maybe = len(db.data['maybe'])
    ignored = len(db.data['all_users']) - playing - not_playing - maybe
    
    return (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"‚úÖ –ò–≥—Ä–∞—é—Ç: *{playing}*\n"
        f"‚ùå –û—Ç–∫–∞–∑–∞–ª–∏—Å—å: *{not_playing}*\n"
        f"‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: *{maybe}*\n"
        f"ü§∑ –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: *{ignored if ignored > 0 else 0}*"
    )

def main():
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(handle_callback))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, start))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    updater.start_polling(
        drop_pending_updates=True,
        timeout=30,
        read_latency=5
    )
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()

if __name__ == "__main__":
    main()
